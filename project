var ribbons;
var numParticles = 300;
var pic;
var pixelSize = 6;
var boach;
var mouseControl = false;
var pointDraw = 1;

function setup() {
    fullScreen();
    pic = loadImage("20231205154234.jpg");
    gradientBackground();
    ribbons = [];
}

function draw() {
    pic.loadPixels();
    if (mouseControl) {
        if (frameCount % 10 == 0) {
            noStroke();
            fill(242, 230, 230, 30);
            rect(0, 0, width, height);
        }
        pointDraw = 0;
        if (frameCount % 60 == 0) {
            var batch = 6;
            for (var batch_index = 0; batch_index < batch; batch_index++) {
                ribbons.push(new Ribbon(random(200, 400), random(height / 3), random(-1, 1) > 0));
            }
        }

        for (var i = ribbons.length - 1; i >= 0; i--) {
            var ribbon = ribbons[i];
            ribbon.update();
            ribbon.display();
            if (ribbon.isOffScreen() || ribbon.shouldRemove()) {
                ribbons.splice(i, 1);
            }
        }
    }

    if (!mouseControl && pointDraw == 0) {
        pointDraw = 1;
        gradientBackground();
    }

  colorMode(RGB, 255, 255, 255);
  for (let y = 0; y < pic.height; y += pixelSize) {
    for (let x = 0; x < pic.width; x += pixelSize) {
      let newX = map(x, 0, pic.width, 0, width);
      let newY = map(y, 0, pic.height, 0, height);
      let index = x + y * pic.width;
      let currentColor = pic.pixels[index];
      let r = red(currentColor);
      let g = green(currentColor);
      let b = blue(currentColor);
      let h = hue(currentColor);
      let s = saturation(currentColor);
      let bB = brightness(currentColor);
      let avgHSB = (h / 3.6 + s + bB) / 3;
      let avgRGB = (r + s + b) / 3;
      let newSize = map(avgHSB, 0, 100, 2, pixelSize);
      let newSizeRY = map(avgRGB, 0, 255, 2, pixelSize); // 用于突出显示红色和黄色
  
      fill(currentColor);
      noStroke();
      rect(newX, newY, newSize, newSizeRY);
    }
  }
}

function mousePressed() {
    boach = !mouseControl;
    mouseControl = boach;
}

function Ribbon(w, y1, movingRight) {
    this.w = w;
    this.h = random(15, 25);
    this.y1 = y1;
    this.movingRight = movingRight;
    this.x1 = this.movingRight ? -this.w : width;
    this.speed = random(6.0, 12.0);
    this.color_choose = random(0, 1.7);
    if (this.color_choose < 0.5) {
        this.H = random(351, 361);
    } else if (this.color_choose < 1) {
        this.H = random(55, 65);
    } else if (this.color_choose < 1.7) {
        this.H = random(1, 13);
    }
    this.S = random(38, 68);
    this.B = 99;
    colorMode(HSB, 360, 100, 100, 100);
    this.c1 = color(this.H, this.S, this.B, 40);
    this.noiseOffset = random(1000);
}

Ribbon.prototype.update = function() {
    this.x1 += this.movingRight ? this.speed : -this.speed;
    this.y1 += map(noise(this.noiseOffset, frameCount * 0.01), 0, 1, -4, 4);
    this.noiseOffset += 0.01;
}

Ribbon.prototype.display = function() {
    fill(this.c1);
    noStroke();
    beginShape();
    for (var i = 0; i <= this.w; i += 5) {
        var wave = sin(radians(frameCount * 2 + i)) * this.h / 3;
        vertex(this.x1 + i, this.y1 + wave);
    }
    for (var i = this.w; i >= 0; i -= 5) {
        var wave = sin(radians(frameCount * 2 + i)) * this.h / 3;
        vertex(this.x1 + i, this.y1 + this.h - wave);
    }
    endShape(CLOSE);
}

Ribbon.prototype.isOffScreen = function() {
    return this.movingRight ? this.x1 > width : this.x1 + this.w < 0;
}

Ribbon.prototype.shouldRemove = function() {
    return this.x1 > width / 6 && this.x1 < width * 5 / 6 && random(width * 2 / (3 * this.speed)) < 1 && this.y1 > height / 4;
}

function gradientBackground() {
  colorMode(RGB,255,255,255);
  for (var xx = 0; xx < width; xx++) {
    var yy;
    for (yy = 0; yy < height / 12; yy++) {
      var ratioY = map(yy, 0, height / 12, 0, 1);
      var c = lerpColor(color('#FABDBE'), color('#FA7779'), ratioY);
      stroke(c);
      point(xx, yy);
    }
    yy--;
    for (yy++; yy < height * 2 / 5; yy++) {
      var ratioY = map(yy, height / 12, height * 2 / 5, 0, 1);
      var c = lerpColor(color('#FA7779'), color('#77A8FA'), ratioY);
      stroke(c);
      point(xx, yy);
    }
    yy--;
    for (yy++; yy < height * 3 / 5; yy++) {
      var ratioY = map(yy, height * 2 / 5, height * 3 / 5, 0, 1);
      var c = lerpColor(color('#77A8FA'), color('#BDFAF5'), ratioY);
      stroke(c);
      point(xx, yy);
    }
    yy--;
    for (yy++; yy < height * 7 / 10; yy++) {
      var ratioY = map(yy, height * 3 / 5, height * 7 / 10, 0, 1);
      var c = lerpColor(color('#BDFAF5'), color('#E1F085'), ratioY);
      stroke(c);
      point(xx, yy);
    }
    yy--;
    for (yy++; yy < height; yy++) {
      var ratioY = map(yy, height * 7 / 10, height, 0, 1);
      var c = lerpColor(color('#E1F085'), color('#FF6243'), ratioY);
      stroke(c);
      point(xx, yy);
    }
  }
}
